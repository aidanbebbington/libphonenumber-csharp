// Generated by ProtoGen, Version=2.3.0.277, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!

using System;
using System.CodeDom.Compiler;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace PhoneNumbers
{
    #region Messages

    [DebuggerNonUserCode]
    [CompilerGenerated]
    [GeneratedCode("ProtoGen", "2.3.0.277")]
    public class PhoneNumber
    {
        public const int CountryCodeFieldNumber = 1;

        public const int NationalNumberFieldNumber = 2;

        public const int ExtensionFieldNumber = 3;

        public const int ItalianLeadingZeroFieldNumber = 4;

        public const int NumberOfLeadingZerosFieldNumber = 8;

        public const int RawInputFieldNumber = 5;

        public const int CountryCodeSourceFieldNumber = 6;

        public const int PreferredDomesticCarrierCodeFieldNumber = 7;

        public static PhoneNumber DefaultInstance { get; } = new Builder().BuildPartial();

        public PhoneNumber DefaultInstanceForType => DefaultInstance;

        protected PhoneNumber ThisMessage => this;

        public bool HasCountryCode { get; private set; }

        public int CountryCode { get; private set; }

        public bool HasNationalNumber { get; private set; }

        public ulong NationalNumber { get; private set; }

        public bool HasExtension { get; private set; }

        public string Extension { get; private set; } = "";

        public bool HasItalianLeadingZero { get; private set; }

        public bool ItalianLeadingZero { get; private set; }

        public bool HasNumberOfLeadingZeros { get; private set; }

        public int NumberOfLeadingZeros { get; private set; } = 1;

        public bool HasRawInput { get; private set; }

        public string RawInput { get; private set; } = "";

        public bool HasCountryCodeSource { get; private set; }

        public Types.CountryCodeSource CountryCodeSource { get; private set; } = Types.CountryCodeSource.UNSPECIFIED;

        public bool HasPreferredDomesticCarrierCode { get; private set; }

        public string PreferredDomesticCarrierCode { get; private set; } = "";

        public bool IsInitialized
        {
            get
            {
                if (!HasCountryCode) return false;
                if (!HasNationalNumber) return false;
                return true;
            }
        }

        public static Builder CreateBuilder()
        {
            return new Builder();
        }

        public Builder ToBuilder()
        {
            return CreateBuilder(this);
        }

        public Builder CreateBuilderForType()
        {
            return new Builder();
        }

        public static Builder CreateBuilder(PhoneNumber prototype)
        {
            return new Builder().MergeFrom(prototype);
        }

        #region Nested types

        [DebuggerNonUserCode]
        [CompilerGenerated]
        [GeneratedCode("ProtoGen", "2.3.0.277")]
        public static class Types
        {
            [CompilerGenerated]
            [GeneratedCode("ProtoGen", "2.3.0.277")]
            public enum CountryCodeSource
            {
                UNSPECIFIED = 0,
                FROM_NUMBER_WITH_PLUS_SIGN = 1,
                FROM_NUMBER_WITH_IDD = 5,
                FROM_NUMBER_WITHOUT_PLUS_SIGN = 10,
                FROM_DEFAULT_COUNTRY = 20
            }
        }

        #endregion

        [DebuggerNonUserCode]
        [CompilerGenerated]
        [GeneratedCode("ProtoGen", "2.3.0.277")]
        public class Builder
        {
            protected Builder ThisBuilder => this;

            protected PhoneNumber MessageBeingBuilt { get; private set; } = new PhoneNumber();

            public PhoneNumber DefaultInstanceForType => DefaultInstance;


            public bool HasCountryCode => MessageBeingBuilt.HasCountryCode;

            public int CountryCode
            {
                get => MessageBeingBuilt.CountryCode;
                set => SetCountryCode(value);
            }

            public bool HasNationalNumber => MessageBeingBuilt.HasNationalNumber;

            public ulong NationalNumber
            {
                get => MessageBeingBuilt.NationalNumber;
                set => SetNationalNumber(value);
            }

            public bool HasExtension => MessageBeingBuilt.HasExtension;

            public string Extension
            {
                get => MessageBeingBuilt.Extension;
                set => SetExtension(value);
            }

            public bool HasItalianLeadingZero => MessageBeingBuilt.HasItalianLeadingZero;

            public bool ItalianLeadingZero
            {
                get => MessageBeingBuilt.ItalianLeadingZero;
                set => SetItalianLeadingZero(value);
            }

            public bool HasNumberOfLeadingZeros => MessageBeingBuilt.HasNumberOfLeadingZeros;

            public int NumberOfLeadingZeros
            {
                get => MessageBeingBuilt.NumberOfLeadingZeros;
                set => SetNumberOfLeadingZeros(value);
            }

            public bool HasRawInput => MessageBeingBuilt.HasRawInput;

            public string RawInput
            {
                get => MessageBeingBuilt.RawInput;
                set => SetRawInput(value);
            }

            public bool HasCountryCodeSource => MessageBeingBuilt.HasCountryCodeSource;

            public Types.CountryCodeSource CountryCodeSource
            {
                get => MessageBeingBuilt.CountryCodeSource;
                set => SetCountryCodeSource(value);
            }

            public bool HasPreferredDomesticCarrierCode => MessageBeingBuilt.HasPreferredDomesticCarrierCode;

            public string PreferredDomesticCarrierCode
            {
                get => MessageBeingBuilt.PreferredDomesticCarrierCode;
                set => SetPreferredDomesticCarrierCode(value);
            }

            public Builder Clear()
            {
                MessageBeingBuilt = new PhoneNumber();
                return this;
            }

            public Builder Clone()
            {
                return new Builder().MergeFrom(MessageBeingBuilt);
            }

            public PhoneNumber Build()
            {
                return BuildPartial();
            }

            public PhoneNumber BuildPartial()
            {
                if (MessageBeingBuilt == null)
                    throw new InvalidOperationException("build() has already been called on this Builder");
                var returnMe = MessageBeingBuilt;
                MessageBeingBuilt = null;
                return returnMe;
            }


            public Builder MergeFrom(PhoneNumber other)
            {
                if (other == DefaultInstance) return this;
                if (other.HasCountryCode) CountryCode = other.CountryCode;
                if (other.HasNationalNumber) NationalNumber = other.NationalNumber;
                if (other.HasExtension) Extension = other.Extension;
                if (other.HasItalianLeadingZero) ItalianLeadingZero = other.ItalianLeadingZero;
                if (other.HasNumberOfLeadingZeros) NumberOfLeadingZeros = other.NumberOfLeadingZeros;
                if (other.HasRawInput) RawInput = other.RawInput;
                if (other.HasCountryCodeSource) CountryCodeSource = other.CountryCodeSource;
                if (other.HasPreferredDomesticCarrierCode)
                    PreferredDomesticCarrierCode = other.PreferredDomesticCarrierCode;
                return this;
            }

            public Builder SetCountryCode(int value)
            {
                MessageBeingBuilt.HasCountryCode = true;
                MessageBeingBuilt.CountryCode = value;
                return this;
            }

            public Builder ClearCountryCode()
            {
                MessageBeingBuilt.HasCountryCode = false;
                MessageBeingBuilt.CountryCode = 0;
                return this;
            }

            public Builder SetNationalNumber(ulong value)
            {
                MessageBeingBuilt.HasNationalNumber = true;
                MessageBeingBuilt.NationalNumber = value;
                return this;
            }

            public Builder ClearNationalNumber()
            {
                MessageBeingBuilt.HasNationalNumber = false;
                MessageBeingBuilt.NationalNumber = 0UL;
                return this;
            }

            public Builder SetExtension(string value)
            {
                if (value == null) throw new ArgumentNullException(nameof(value));
                MessageBeingBuilt.HasExtension = true;
                MessageBeingBuilt.Extension = value;
                return this;
            }

            public Builder ClearExtension()
            {
                MessageBeingBuilt.HasExtension = false;
                MessageBeingBuilt.Extension = "";
                return this;
            }

            public Builder SetItalianLeadingZero(bool value)
            {
                MessageBeingBuilt.HasItalianLeadingZero = true;
                MessageBeingBuilt.ItalianLeadingZero = value;
                return this;
            }

            public Builder ClearItalianLeadingZero()
            {
                MessageBeingBuilt.HasItalianLeadingZero = false;
                MessageBeingBuilt.ItalianLeadingZero = false;
                return this;
            }

            public Builder SetNumberOfLeadingZeros(int value)
            {
                MessageBeingBuilt.HasNumberOfLeadingZeros = true;
                MessageBeingBuilt.NumberOfLeadingZeros = value;
                return this;
            }

            public Builder ClearNumberOfLeadingZeros()
            {
                MessageBeingBuilt.HasNumberOfLeadingZeros = false;
                MessageBeingBuilt.NumberOfLeadingZeros = 1;
                return this;
            }

            public Builder SetRawInput(string value)
            {
                if (value == null) throw new ArgumentNullException(nameof(value));
                MessageBeingBuilt.HasRawInput = true;
                MessageBeingBuilt.RawInput = value;
                return this;
            }

            public Builder ClearRawInput()
            {
                MessageBeingBuilt.HasRawInput = false;
                MessageBeingBuilt.RawInput = "";
                return this;
            }

            public Builder SetCountryCodeSource(Types.CountryCodeSource value)
            {
                MessageBeingBuilt.HasCountryCodeSource = true;
                MessageBeingBuilt.CountryCodeSource = value;
                return this;
            }

            public Builder ClearCountryCodeSource()
            {
                MessageBeingBuilt.HasCountryCodeSource = false;
                MessageBeingBuilt.CountryCodeSource = Types.CountryCodeSource.UNSPECIFIED;
                return this;
            }

            public Builder SetPreferredDomesticCarrierCode(string value)
            {
                if (value == null) throw new ArgumentNullException(nameof(value));
                MessageBeingBuilt.HasPreferredDomesticCarrierCode = true;
                MessageBeingBuilt.PreferredDomesticCarrierCode = value;
                return this;
            }

            public Builder ClearPreferredDomesticCarrierCode()
            {
                MessageBeingBuilt.HasPreferredDomesticCarrierCode = false;
                MessageBeingBuilt.PreferredDomesticCarrierCode = "";
                return this;
            }
        }


        #region Lite runtime methods

        public override int GetHashCode()
        {
            var hash = GetType().GetHashCode();
            if (HasCountryCode) hash ^= CountryCode.GetHashCode();
            if (HasNationalNumber) hash ^= NationalNumber.GetHashCode();
            if (HasExtension) hash ^= Extension.GetHashCode();
            if (HasItalianLeadingZero) hash ^= ItalianLeadingZero.GetHashCode();
            if (HasNumberOfLeadingZeros) hash ^= NumberOfLeadingZeros.GetHashCode();
            if (HasRawInput) hash ^= RawInput.GetHashCode();
            if (HasCountryCodeSource) hash ^= CountryCodeSource.GetHashCode();
            if (HasPreferredDomesticCarrierCode) hash ^= PreferredDomesticCarrierCode.GetHashCode();
            return hash;
        }

        public override bool Equals(object obj)
        {
            var other = obj as PhoneNumber;
            if (HasCountryCode != other?.HasCountryCode ||
                HasCountryCode && !CountryCode.Equals(other.CountryCode)) return false;
            if (HasNationalNumber != other.HasNationalNumber ||
                HasNationalNumber && !NationalNumber.Equals(other.NationalNumber)) return false;
            if (HasExtension != other.HasExtension || HasExtension && !Extension.Equals(other.Extension)) return false;
            if (HasItalianLeadingZero != other.HasItalianLeadingZero || HasItalianLeadingZero &&
                !ItalianLeadingZero.Equals(other.ItalianLeadingZero)) return false;
            if (HasNumberOfLeadingZeros != other.HasNumberOfLeadingZeros || HasNumberOfLeadingZeros &&
                !NumberOfLeadingZeros.Equals(other.NumberOfLeadingZeros)) return false;
            if (HasRawInput != other.HasRawInput || HasRawInput && !RawInput.Equals(other.RawInput)) return false;
            if (HasCountryCodeSource != other.HasCountryCodeSource ||
                HasCountryCodeSource && !CountryCodeSource.Equals(other.CountryCodeSource)) return false;
            if (HasPreferredDomesticCarrierCode != other.HasPreferredDomesticCarrierCode ||
                HasPreferredDomesticCarrierCode &&
                !PreferredDomesticCarrierCode.Equals(other.PreferredDomesticCarrierCode)) return false;
            return true;
        }

        #endregion
    }

    #endregion
}