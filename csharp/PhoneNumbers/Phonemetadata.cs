// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using System.Collections.Generic;
namespace PhoneNumbers {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Phonemetadata {
  
    
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static Phonemetadata() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class NumberFormat {
    private NumberFormat() { }
    private static readonly NumberFormat defaultInstance = new NumberFormat();
    private static readonly string[] _numberFormatFieldNames = new string[] { "domestic_carrier_code_formatting_rule", "format", "leading_digits_pattern", "national_prefix_formatting_rule", "national_prefix_optional_when_formatting", "pattern" };
    private static readonly uint[] _numberFormatFieldTags = new uint[] { 42, 18, 26, 34, 48, 10 };
    public static NumberFormat DefaultInstance {
      get { return defaultInstance; }
    }
    
    public NumberFormat DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected NumberFormat ThisMessage {
      get { return this; }
    }
    
    public const int PatternFieldNumber = 1;
    private bool hasPattern;
    private string pattern_ = "";
    public bool HasPattern {
      get { return hasPattern; }
    }
    public string Pattern {
      get { return pattern_; }
    }
    
    public const int FormatFieldNumber = 2;
    private bool hasFormat;
    private string format_ = "";
    public bool HasFormat {
      get { return hasFormat; }
    }
    public string Format {
      get { return format_; }
    }
    
    public const int LeadingDigitsPatternFieldNumber = 3;
    private List<string> leadingDigitsPattern_ = new List<string>();
    public IList<string> LeadingDigitsPatternList {
      get { return leadingDigitsPattern_; }
    }
    public int LeadingDigitsPatternCount {
      get { return leadingDigitsPattern_.Count; }
    }
    public string GetLeadingDigitsPattern(int index) {
      return leadingDigitsPattern_[index];
    }
    
    public const int NationalPrefixFormattingRuleFieldNumber = 4;
    private bool hasNationalPrefixFormattingRule;
    private string nationalPrefixFormattingRule_ = "";
    public bool HasNationalPrefixFormattingRule {
      get { return hasNationalPrefixFormattingRule; }
    }
    public string NationalPrefixFormattingRule {
      get { return nationalPrefixFormattingRule_; }
    }
    
    public const int NationalPrefixOptionalWhenFormattingFieldNumber = 6;
    private bool hasNationalPrefixOptionalWhenFormatting;
    private bool nationalPrefixOptionalWhenFormatting_;
    public bool HasNationalPrefixOptionalWhenFormatting {
      get { return hasNationalPrefixOptionalWhenFormatting; }
    }
    public bool NationalPrefixOptionalWhenFormatting {
      get { return nationalPrefixOptionalWhenFormatting_; }
    }
    
    public const int DomesticCarrierCodeFormattingRuleFieldNumber = 5;
    private bool hasDomesticCarrierCodeFormattingRule;
    private string domesticCarrierCodeFormattingRule_ = "";
    public bool HasDomesticCarrierCodeFormattingRule {
      get { return hasDomesticCarrierCodeFormattingRule; }
    }
    public string DomesticCarrierCodeFormattingRule {
      get { return domesticCarrierCodeFormattingRule_; }
    }
    
    public bool IsInitialized {
      get {
        if (!hasPattern) return false;
        if (!hasFormat) return false;
        return true;
      }
    }
    
    
    
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasPattern) hash ^= pattern_.GetHashCode();
      if (hasFormat) hash ^= format_.GetHashCode();
      foreach(string i in leadingDigitsPattern_)
        hash ^= i.GetHashCode();
      if (hasNationalPrefixFormattingRule) hash ^= nationalPrefixFormattingRule_.GetHashCode();
      if (hasNationalPrefixOptionalWhenFormatting) hash ^= nationalPrefixOptionalWhenFormatting_.GetHashCode();
      if (hasDomesticCarrierCodeFormattingRule) hash ^= domesticCarrierCodeFormattingRule_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NumberFormat other = obj as NumberFormat;
      if (other == null) return false;
      if (hasPattern != other.hasPattern || (hasPattern && !pattern_.Equals(other.pattern_))) return false;
      if (hasFormat != other.hasFormat || (hasFormat && !format_.Equals(other.format_))) return false;
      if(leadingDigitsPattern_.Count != other.leadingDigitsPattern_.Count) return false;
      for(int ix=0; ix < leadingDigitsPattern_.Count; ix++)
        if(!leadingDigitsPattern_[ix].Equals(other.leadingDigitsPattern_[ix])) return false;
      if (hasNationalPrefixFormattingRule != other.hasNationalPrefixFormattingRule || (hasNationalPrefixFormattingRule && !nationalPrefixFormattingRule_.Equals(other.nationalPrefixFormattingRule_))) return false;
      if (hasNationalPrefixOptionalWhenFormatting != other.hasNationalPrefixOptionalWhenFormatting || (hasNationalPrefixOptionalWhenFormatting && !nationalPrefixOptionalWhenFormatting_.Equals(other.nationalPrefixOptionalWhenFormatting_))) return false;
      if (hasDomesticCarrierCodeFormattingRule != other.hasDomesticCarrierCodeFormattingRule || (hasDomesticCarrierCodeFormattingRule && !domesticCarrierCodeFormattingRule_.Equals(other.domesticCarrierCodeFormattingRule_))) return false;
      return true;
    }
    
    #endregion
    
    
    public static Builder CreateBuilder() { return new Builder(); }
    public Builder ToBuilder() { return CreateBuilder(this); }
    public Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NumberFormat prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Builder {
      protected Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NumberFormat cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NumberFormat result;
      
      private NumberFormat PrepareBuilder() {
        if (resultIsReadOnly) {
          NumberFormat original = result;
          result = new NumberFormat();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected NumberFormat MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public NumberFormat DefaultInstanceForType {
        get { return NumberFormat.DefaultInstance; }
      }
      
      public NumberFormat Build() { return BuildPartial(); }
      
      public NumberFormat BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result;
      }
      
      
      public Builder MergeFrom(NumberFormat other) {
        if (other == NumberFormat.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPattern) {
          Pattern = other.Pattern;
        }
        if (other.HasFormat) {
          Format = other.Format;
        }
        if (other.leadingDigitsPattern_.Count != 0) {
          result.leadingDigitsPattern_.AddRange(other.leadingDigitsPattern_);
        }
        if (other.HasNationalPrefixFormattingRule) {
          NationalPrefixFormattingRule = other.NationalPrefixFormattingRule;
        }
        if (other.HasNationalPrefixOptionalWhenFormatting) {
          NationalPrefixOptionalWhenFormatting = other.NationalPrefixOptionalWhenFormatting;
        }
        if (other.HasDomesticCarrierCodeFormattingRule) {
          DomesticCarrierCodeFormattingRule = other.DomesticCarrierCodeFormattingRule;
        }
        return this;
      }
      
      
      
      
      public bool HasPattern {
        get { return result.hasPattern; }
      }
      public string Pattern {
        get { return result.Pattern; }
        set { SetPattern(value); }
      }
      public Builder SetPattern(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasPattern = true;
        result.pattern_ = value;
        return this;
      }
      public Builder ClearPattern() {
        PrepareBuilder();
        result.hasPattern = false;
        result.pattern_ = "";
        return this;
      }
      
      public bool HasFormat {
        get { return result.hasFormat; }
      }
      public string Format {
        get { return result.Format; }
        set { SetFormat(value); }
      }
      public Builder SetFormat(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasFormat = true;
        result.format_ = value;
        return this;
      }
      public Builder ClearFormat() {
        PrepareBuilder();
        result.hasFormat = false;
        result.format_ = "";
        return this;
      }
      
      public IList<string> LeadingDigitsPatternList {
        get { return PrepareBuilder().leadingDigitsPattern_; }
      }
      public int LeadingDigitsPatternCount {
        get { return result.LeadingDigitsPatternCount; }
      }
      public string GetLeadingDigitsPattern(int index) {
        return result.GetLeadingDigitsPattern(index);
      }
      public Builder SetLeadingDigitsPattern(int index, string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.leadingDigitsPattern_[index] = value;
        return this;
      }
      public Builder AddLeadingDigitsPattern(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.leadingDigitsPattern_.Add(value);
        return this;
      }
      public Builder AddRangeLeadingDigitsPattern(IEnumerable<string> values) {
        PrepareBuilder();
        result.leadingDigitsPattern_.AddRange(values);
        return this;
      }
      public Builder ClearLeadingDigitsPattern() {
        PrepareBuilder();
        result.leadingDigitsPattern_.Clear();
        return this;
      }
      
      public bool HasNationalPrefixFormattingRule {
        get { return result.hasNationalPrefixFormattingRule; }
      }
      public string NationalPrefixFormattingRule {
        get { return result.NationalPrefixFormattingRule; }
        set { SetNationalPrefixFormattingRule(value); }
      }
      public Builder SetNationalPrefixFormattingRule(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasNationalPrefixFormattingRule = true;
        result.nationalPrefixFormattingRule_ = value;
        return this;
      }
      public Builder ClearNationalPrefixFormattingRule() {
        PrepareBuilder();
        result.hasNationalPrefixFormattingRule = false;
        result.nationalPrefixFormattingRule_ = "";
        return this;
      }
      
      public bool HasNationalPrefixOptionalWhenFormatting {
        get { return result.hasNationalPrefixOptionalWhenFormatting; }
      }
      public bool NationalPrefixOptionalWhenFormatting {
        get { return result.NationalPrefixOptionalWhenFormatting; }
        set { SetNationalPrefixOptionalWhenFormatting(value); }
      }
      public Builder SetNationalPrefixOptionalWhenFormatting(bool value) {
        PrepareBuilder();
        result.hasNationalPrefixOptionalWhenFormatting = true;
        result.nationalPrefixOptionalWhenFormatting_ = value;
        return this;
      }
      public Builder ClearNationalPrefixOptionalWhenFormatting() {
        PrepareBuilder();
        result.hasNationalPrefixOptionalWhenFormatting = false;
        result.nationalPrefixOptionalWhenFormatting_ = false;
        return this;
      }
      
      public bool HasDomesticCarrierCodeFormattingRule {
        get { return result.hasDomesticCarrierCodeFormattingRule; }
      }
      public string DomesticCarrierCodeFormattingRule {
        get { return result.DomesticCarrierCodeFormattingRule; }
        set { SetDomesticCarrierCodeFormattingRule(value); }
      }
      public Builder SetDomesticCarrierCodeFormattingRule(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasDomesticCarrierCodeFormattingRule = true;
        result.domesticCarrierCodeFormattingRule_ = value;
        return this;
      }
      public Builder ClearDomesticCarrierCodeFormattingRule() {
        PrepareBuilder();
        result.hasDomesticCarrierCodeFormattingRule = false;
        result.domesticCarrierCodeFormattingRule_ = "";
        return this;
      }
    }
    static NumberFormat() {
      object.ReferenceEquals(Phonemetadata.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class PhoneNumberDesc {
    private PhoneNumberDesc() { }
    private static readonly PhoneNumberDesc defaultInstance = new PhoneNumberDesc();
    private static readonly string[] _phoneNumberDescFieldNames = new string[] { "example_number", "national_number_pattern", "possible_length", "possible_length_local_only" };
    private static readonly uint[] _phoneNumberDescFieldTags = new uint[] { 50, 18, 72, 80 };
    public static PhoneNumberDesc DefaultInstance {
      get { return defaultInstance; }
    }
    
    public PhoneNumberDesc DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected PhoneNumberDesc ThisMessage {
      get { return this; }
    }
    
    public const int NationalNumberPatternFieldNumber = 2;
    private bool hasNationalNumberPattern;
    private string nationalNumberPattern_ = "";
    public bool HasNationalNumberPattern {
      get { return hasNationalNumberPattern; }
    }
    public string NationalNumberPattern {
      get { return nationalNumberPattern_; }
    }
    
    public const int PossibleLengthFieldNumber = 9;
    private List<int> possibleLength_ = new List<int>();
    public IList<int> PossibleLengthList {
      get { return possibleLength_; }
    }
    public int PossibleLengthCount {
      get { return possibleLength_.Count; }
    }
    public int GetPossibleLength(int index) {
      return possibleLength_[index];
    }
    
    public const int PossibleLengthLocalOnlyFieldNumber = 10;
    private List<int> possibleLengthLocalOnly_ = new List<int>();
    public IList<int> PossibleLengthLocalOnlyList {
      get { return possibleLengthLocalOnly_; }
    }
    public int PossibleLengthLocalOnlyCount {
      get { return possibleLengthLocalOnly_.Count; }
    }
    public int GetPossibleLengthLocalOnly(int index) {
      return possibleLengthLocalOnly_[index];
    }
    
    public const int ExampleNumberFieldNumber = 6;
    private bool hasExampleNumber;
    private string exampleNumber_ = "";
    public bool HasExampleNumber {
      get { return hasExampleNumber; }
    }
    public string ExampleNumber {
      get { return exampleNumber_; }
    }
    
    public bool IsInitialized {
      get {
        return true;
      }
    }
    
    
    
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasNationalNumberPattern) hash ^= nationalNumberPattern_.GetHashCode();
      foreach(int i in possibleLength_)
        hash ^= i.GetHashCode();
      foreach(int i in possibleLengthLocalOnly_)
        hash ^= i.GetHashCode();
      if (hasExampleNumber) hash ^= exampleNumber_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneNumberDesc other = obj as PhoneNumberDesc;
      if (other == null) return false;
      if (hasNationalNumberPattern != other.hasNationalNumberPattern || (hasNationalNumberPattern && !nationalNumberPattern_.Equals(other.nationalNumberPattern_))) return false;
      if(possibleLength_.Count != other.possibleLength_.Count) return false;
      for(int ix=0; ix < possibleLength_.Count; ix++)
        if(!possibleLength_[ix].Equals(other.possibleLength_[ix])) return false;
      if(possibleLengthLocalOnly_.Count != other.possibleLengthLocalOnly_.Count) return false;
      for(int ix=0; ix < possibleLengthLocalOnly_.Count; ix++)
        if(!possibleLengthLocalOnly_[ix].Equals(other.possibleLengthLocalOnly_[ix])) return false;
      if (hasExampleNumber != other.hasExampleNumber || (hasExampleNumber && !exampleNumber_.Equals(other.exampleNumber_))) return false;
      return true;
    }
    
    #endregion
    
    
    public static Builder CreateBuilder() { return new Builder(); }
    public Builder ToBuilder() { return CreateBuilder(this); }
    public Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneNumberDesc prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Builder {
      protected Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PhoneNumberDesc cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PhoneNumberDesc result;
      
      private PhoneNumberDesc PrepareBuilder() {
        if (resultIsReadOnly) {
          PhoneNumberDesc original = result;
          result = new PhoneNumberDesc();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected PhoneNumberDesc MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public PhoneNumberDesc DefaultInstanceForType {
        get { return PhoneNumberDesc.DefaultInstance; }
      }
      
      public PhoneNumberDesc Build() { return BuildPartial(); }
      
      public PhoneNumberDesc BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result;
      }
      
      
      public Builder MergeFrom(PhoneNumberDesc other) {
        if (other == PhoneNumberDesc.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNationalNumberPattern) {
          NationalNumberPattern = other.NationalNumberPattern;
        }
        if (other.possibleLength_.Count != 0) {
          result.possibleLength_.AddRange(other.possibleLength_);
        }
        if (other.possibleLengthLocalOnly_.Count != 0) {
          result.possibleLengthLocalOnly_.AddRange(other.possibleLengthLocalOnly_);
        }
        if (other.HasExampleNumber) {
          ExampleNumber = other.ExampleNumber;
        }
        return this;
      }
      
      
      
      
      public bool HasNationalNumberPattern {
        get { return result.hasNationalNumberPattern; }
      }
      public string NationalNumberPattern {
        get { return result.NationalNumberPattern; }
        set { SetNationalNumberPattern(value); }
      }
      public Builder SetNationalNumberPattern(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasNationalNumberPattern = true;
        result.nationalNumberPattern_ = value;
        return this;
      }
      public Builder ClearNationalNumberPattern() {
        PrepareBuilder();
        result.hasNationalNumberPattern = false;
        result.nationalNumberPattern_ = "";
        return this;
      }
      
      public IList<int> PossibleLengthList {
        get { return PrepareBuilder().possibleLength_; }
      }
      public int PossibleLengthCount {
        get { return result.PossibleLengthCount; }
      }
      public int GetPossibleLength(int index) {
        return result.GetPossibleLength(index);
      }
      public Builder SetPossibleLength(int index, int value) {
        PrepareBuilder();
        result.possibleLength_[index] = value;
        return this;
      }
      public Builder AddPossibleLength(int value) {
        PrepareBuilder();
        result.possibleLength_.Add(value);
        return this;
      }
      public Builder AddRangePossibleLength(IEnumerable<int> values) {
        PrepareBuilder();
        result.possibleLength_.AddRange(values);
        return this;
      }
      public Builder ClearPossibleLength() {
        PrepareBuilder();
        result.possibleLength_.Clear();
        return this;
      }
      
      public IList<int> PossibleLengthLocalOnlyList {
        get { return PrepareBuilder().possibleLengthLocalOnly_; }
      }
      public int PossibleLengthLocalOnlyCount {
        get { return result.PossibleLengthLocalOnlyCount; }
      }
      public int GetPossibleLengthLocalOnly(int index) {
        return result.GetPossibleLengthLocalOnly(index);
      }
      public Builder SetPossibleLengthLocalOnly(int index, int value) {
        PrepareBuilder();
        result.possibleLengthLocalOnly_[index] = value;
        return this;
      }
      public Builder AddPossibleLengthLocalOnly(int value) {
        PrepareBuilder();
        result.possibleLengthLocalOnly_.Add(value);
        return this;
      }
      public Builder AddRangePossibleLengthLocalOnly(IEnumerable<int> values) {
        PrepareBuilder();
        result.possibleLengthLocalOnly_.AddRange(values);
        return this;
      }
      public Builder ClearPossibleLengthLocalOnly() {
        PrepareBuilder();
        result.possibleLengthLocalOnly_.Clear();
        return this;
      }
      
      public bool HasExampleNumber {
        get { return result.hasExampleNumber; }
      }
      public string ExampleNumber {
        get { return result.ExampleNumber; }
        set { SetExampleNumber(value); }
      }
      public Builder SetExampleNumber(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasExampleNumber = true;
        result.exampleNumber_ = value;
        return this;
      }
      public Builder ClearExampleNumber() {
        PrepareBuilder();
        result.hasExampleNumber = false;
        result.exampleNumber_ = "";
        return this;
      }
    }
    static PhoneNumberDesc() {
      object.ReferenceEquals(Phonemetadata.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class PhoneMetadata {
    private PhoneMetadata() { }
    private static readonly PhoneMetadata defaultInstance = new PhoneMetadata();
    private static readonly string[] _phoneMetadataFieldNames = new string[] { "carrier_specific", "country_code", "emergency", "fixed_line", "general_desc", "id", "international_prefix", "intl_number_format", "leading_digits", "leading_zero_possible", "main_country_for_code", "mobile", "mobile_number_portable_region", "national_prefix", "national_prefix_for_parsing", "national_prefix_transform_rule", "no_international_dialling", "number_format", "pager", "personal_number", "preferred_extn_prefix", "preferred_international_prefix", "premium_rate", "same_mobile_and_fixed_line_pattern", "shared_cost", "short_code", "sms_services", "standard_rate", "toll_free", "uan", "voicemail", "voip" };
    private static readonly uint[] _phoneMetadataFieldTags = new uint[] { 250, 80, 218, 18, 10, 74, 90, 162, 186, 208, 176, 26, 256, 98, 122, 130, 194, 154, 170, 58, 106, 138, 42, 144, 50, 234, 266, 242, 34, 202, 226, 66 };
    public static PhoneMetadata DefaultInstance {
      get { return defaultInstance; }
    }
    
    public PhoneMetadata DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected PhoneMetadata ThisMessage {
      get { return this; }
    }
    
    public const int GeneralDescFieldNumber = 1;
    private bool hasGeneralDesc;
    private PhoneNumberDesc generalDesc_;
    public bool HasGeneralDesc {
      get { return hasGeneralDesc; }
    }
    public PhoneNumberDesc GeneralDesc {
      get { return generalDesc_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int FixedLineFieldNumber = 2;
    private bool hasFixedLine;
    private PhoneNumberDesc fixedLine_;
    public bool HasFixedLine {
      get { return hasFixedLine; }
    }
    public PhoneNumberDesc FixedLine {
      get { return fixedLine_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int MobileFieldNumber = 3;
    private bool hasMobile;
    private PhoneNumberDesc mobile_;
    public bool HasMobile {
      get { return hasMobile; }
    }
    public PhoneNumberDesc Mobile {
      get { return mobile_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int TollFreeFieldNumber = 4;
    private bool hasTollFree;
    private PhoneNumberDesc tollFree_;
    public bool HasTollFree {
      get { return hasTollFree; }
    }
    public PhoneNumberDesc TollFree {
      get { return tollFree_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int PremiumRateFieldNumber = 5;
    private bool hasPremiumRate;
    private PhoneNumberDesc premiumRate_;
    public bool HasPremiumRate {
      get { return hasPremiumRate; }
    }
    public PhoneNumberDesc PremiumRate {
      get { return premiumRate_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int SharedCostFieldNumber = 6;
    private bool hasSharedCost;
    private PhoneNumberDesc sharedCost_;
    public bool HasSharedCost {
      get { return hasSharedCost; }
    }
    public PhoneNumberDesc SharedCost {
      get { return sharedCost_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int PersonalNumberFieldNumber = 7;
    private bool hasPersonalNumber;
    private PhoneNumberDesc personalNumber_;
    public bool HasPersonalNumber {
      get { return hasPersonalNumber; }
    }
    public PhoneNumberDesc PersonalNumber {
      get { return personalNumber_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int VoipFieldNumber = 8;
    private bool hasVoip;
    private PhoneNumberDesc voip_;
    public bool HasVoip {
      get { return hasVoip; }
    }
    public PhoneNumberDesc Voip {
      get { return voip_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int PagerFieldNumber = 21;
    private bool hasPager;
    private PhoneNumberDesc pager_;
    public bool HasPager {
      get { return hasPager; }
    }
    public PhoneNumberDesc Pager {
      get { return pager_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int UanFieldNumber = 25;
    private bool hasUan;
    private PhoneNumberDesc uan_;
    public bool HasUan {
      get { return hasUan; }
    }
    public PhoneNumberDesc Uan {
      get { return uan_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int EmergencyFieldNumber = 27;
    private bool hasEmergency;
    private PhoneNumberDesc emergency_;
    public bool HasEmergency {
      get { return hasEmergency; }
    }
    public PhoneNumberDesc Emergency {
      get { return emergency_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int VoicemailFieldNumber = 28;
    private bool hasVoicemail;
    private PhoneNumberDesc voicemail_;
    public bool HasVoicemail {
      get { return hasVoicemail; }
    }
    public PhoneNumberDesc Voicemail {
      get { return voicemail_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int ShortCodeFieldNumber = 29;
    private bool hasShortCode;
    private PhoneNumberDesc shortCode_;
    public bool HasShortCode {
      get { return hasShortCode; }
    }
    public PhoneNumberDesc ShortCode {
      get { return shortCode_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int StandardRateFieldNumber = 30;
    private bool hasStandardRate;
    private PhoneNumberDesc standardRate_;
    public bool HasStandardRate {
      get { return hasStandardRate; }
    }
    public PhoneNumberDesc StandardRate {
      get { return standardRate_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int CarrierSpecificFieldNumber = 31;
    private bool hasCarrierSpecific;
    private PhoneNumberDesc carrierSpecific_;
    public bool HasCarrierSpecific {
      get { return hasCarrierSpecific; }
    }
    public PhoneNumberDesc CarrierSpecific {
      get { return carrierSpecific_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int SmsServicesFieldNumber = 33;
    private bool hasSmsServices;
    private PhoneNumberDesc smsServices_;
    public bool HasSmsServices {
      get { return hasSmsServices; }
    }
    public PhoneNumberDesc SmsServices {
      get { return smsServices_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int NoInternationalDiallingFieldNumber = 24;
    private bool hasNoInternationalDialling;
    private PhoneNumberDesc noInternationalDialling_;
    public bool HasNoInternationalDialling {
      get { return hasNoInternationalDialling; }
    }
    public PhoneNumberDesc NoInternationalDialling {
      get { return noInternationalDialling_ ?? PhoneNumberDesc.DefaultInstance; }
    }
    
    public const int IdFieldNumber = 9;
    private bool hasId;
    private string id_ = "";
    public bool HasId {
      get { return hasId; }
    }
    public string Id {
      get { return id_; }
    }
    
    public const int CountryCodeFieldNumber = 10;
    private bool hasCountryCode;
    private int countryCode_;
    public bool HasCountryCode {
      get { return hasCountryCode; }
    }
    public int CountryCode {
      get { return countryCode_; }
    }
    
    public const int InternationalPrefixFieldNumber = 11;
    private bool hasInternationalPrefix;
    private string internationalPrefix_ = "";
    public bool HasInternationalPrefix {
      get { return hasInternationalPrefix; }
    }
    public string InternationalPrefix {
      get { return internationalPrefix_; }
    }
    
    public const int PreferredInternationalPrefixFieldNumber = 17;
    private bool hasPreferredInternationalPrefix;
    private string preferredInternationalPrefix_ = "";
    public bool HasPreferredInternationalPrefix {
      get { return hasPreferredInternationalPrefix; }
    }
    public string PreferredInternationalPrefix {
      get { return preferredInternationalPrefix_; }
    }
    
    public const int NationalPrefixFieldNumber = 12;
    private bool hasNationalPrefix;
    private string nationalPrefix_ = "";
    public bool HasNationalPrefix {
      get { return hasNationalPrefix; }
    }
    public string NationalPrefix {
      get { return nationalPrefix_; }
    }
    
    public const int PreferredExtnPrefixFieldNumber = 13;
    private bool hasPreferredExtnPrefix;
    private string preferredExtnPrefix_ = "";
    public bool HasPreferredExtnPrefix {
      get { return hasPreferredExtnPrefix; }
    }
    public string PreferredExtnPrefix {
      get { return preferredExtnPrefix_; }
    }
    
    public const int NationalPrefixForParsingFieldNumber = 15;
    private bool hasNationalPrefixForParsing;
    private string nationalPrefixForParsing_ = "";
    public bool HasNationalPrefixForParsing {
      get { return hasNationalPrefixForParsing; }
    }
    public string NationalPrefixForParsing {
      get { return nationalPrefixForParsing_; }
    }
    
    public const int NationalPrefixTransformRuleFieldNumber = 16;
    private bool hasNationalPrefixTransformRule;
    private string nationalPrefixTransformRule_ = "";
    public bool HasNationalPrefixTransformRule {
      get { return hasNationalPrefixTransformRule; }
    }
    public string NationalPrefixTransformRule {
      get { return nationalPrefixTransformRule_; }
    }
    
    public const int SameMobileAndFixedLinePatternFieldNumber = 18;
    private bool hasSameMobileAndFixedLinePattern;
    private bool sameMobileAndFixedLinePattern_;
    public bool HasSameMobileAndFixedLinePattern {
      get { return hasSameMobileAndFixedLinePattern; }
    }
    public bool SameMobileAndFixedLinePattern {
      get { return sameMobileAndFixedLinePattern_; }
    }
    
    public const int NumberFormatFieldNumber = 19;
    private List<NumberFormat> numberFormat_ = new List<NumberFormat>();
    public IList<NumberFormat> NumberFormatList {
      get { return numberFormat_; }
    }
    public int NumberFormatCount {
      get { return numberFormat_.Count; }
    }
    public NumberFormat GetNumberFormat(int index) {
      return numberFormat_[index];
    }
    
    public const int IntlNumberFormatFieldNumber = 20;
    private List<NumberFormat> intlNumberFormat_ = new List<NumberFormat>();
    public IList<NumberFormat> IntlNumberFormatList {
      get { return intlNumberFormat_; }
    }
    public int IntlNumberFormatCount {
      get { return intlNumberFormat_.Count; }
    }
    public NumberFormat GetIntlNumberFormat(int index) {
      return intlNumberFormat_[index];
    }
    
    public const int MainCountryForCodeFieldNumber = 22;
    private bool hasMainCountryForCode;
    private bool mainCountryForCode_;
    public bool HasMainCountryForCode {
      get { return hasMainCountryForCode; }
    }
    public bool MainCountryForCode {
      get { return mainCountryForCode_; }
    }
    
    public const int LeadingDigitsFieldNumber = 23;
    private bool hasLeadingDigits;
    private string leadingDigits_ = "";
    public bool HasLeadingDigits {
      get { return hasLeadingDigits; }
    }
    public string LeadingDigits {
      get { return leadingDigits_; }
    }
    
    public const int LeadingZeroPossibleFieldNumber = 26;
    private bool hasLeadingZeroPossible;
    private bool leadingZeroPossible_;
    public bool HasLeadingZeroPossible {
      get { return hasLeadingZeroPossible; }
    }
    public bool LeadingZeroPossible {
      get { return leadingZeroPossible_; }
    }
    
    public const int MobileNumberPortableRegionFieldNumber = 32;
    private bool hasMobileNumberPortableRegion;
    private bool mobileNumberPortableRegion_;
    public bool HasMobileNumberPortableRegion {
      get { return hasMobileNumberPortableRegion; }
    }
    public bool MobileNumberPortableRegion {
      get { return mobileNumberPortableRegion_; }
    }
    
    public bool IsInitialized {
      get {
        if (!hasId) return false;
        foreach (NumberFormat element in NumberFormatList) {
          if (!element.IsInitialized) return false;
        }
        foreach (NumberFormat element in IntlNumberFormatList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    
    
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasGeneralDesc) hash ^= generalDesc_.GetHashCode();
      if (hasFixedLine) hash ^= fixedLine_.GetHashCode();
      if (hasMobile) hash ^= mobile_.GetHashCode();
      if (hasTollFree) hash ^= tollFree_.GetHashCode();
      if (hasPremiumRate) hash ^= premiumRate_.GetHashCode();
      if (hasSharedCost) hash ^= sharedCost_.GetHashCode();
      if (hasPersonalNumber) hash ^= personalNumber_.GetHashCode();
      if (hasVoip) hash ^= voip_.GetHashCode();
      if (hasPager) hash ^= pager_.GetHashCode();
      if (hasUan) hash ^= uan_.GetHashCode();
      if (hasEmergency) hash ^= emergency_.GetHashCode();
      if (hasVoicemail) hash ^= voicemail_.GetHashCode();
      if (hasShortCode) hash ^= shortCode_.GetHashCode();
      if (hasStandardRate) hash ^= standardRate_.GetHashCode();
      if (hasCarrierSpecific) hash ^= carrierSpecific_.GetHashCode();
      if (hasSmsServices) hash ^= smsServices_.GetHashCode();
      if (hasNoInternationalDialling) hash ^= noInternationalDialling_.GetHashCode();
      if (hasId) hash ^= id_.GetHashCode();
      if (hasCountryCode) hash ^= countryCode_.GetHashCode();
      if (hasInternationalPrefix) hash ^= internationalPrefix_.GetHashCode();
      if (hasPreferredInternationalPrefix) hash ^= preferredInternationalPrefix_.GetHashCode();
      if (hasNationalPrefix) hash ^= nationalPrefix_.GetHashCode();
      if (hasPreferredExtnPrefix) hash ^= preferredExtnPrefix_.GetHashCode();
      if (hasNationalPrefixForParsing) hash ^= nationalPrefixForParsing_.GetHashCode();
      if (hasNationalPrefixTransformRule) hash ^= nationalPrefixTransformRule_.GetHashCode();
      if (hasSameMobileAndFixedLinePattern) hash ^= sameMobileAndFixedLinePattern_.GetHashCode();
      foreach(NumberFormat i in numberFormat_)
        hash ^= i.GetHashCode();
      foreach(NumberFormat i in intlNumberFormat_)
        hash ^= i.GetHashCode();
      if (hasMainCountryForCode) hash ^= mainCountryForCode_.GetHashCode();
      if (hasLeadingDigits) hash ^= leadingDigits_.GetHashCode();
      if (hasLeadingZeroPossible) hash ^= leadingZeroPossible_.GetHashCode();
      if (hasMobileNumberPortableRegion) hash ^= mobileNumberPortableRegion_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneMetadata other = obj as PhoneMetadata;
      if (other == null) return false;
      if (hasGeneralDesc != other.hasGeneralDesc || (hasGeneralDesc && !generalDesc_.Equals(other.generalDesc_))) return false;
      if (hasFixedLine != other.hasFixedLine || (hasFixedLine && !fixedLine_.Equals(other.fixedLine_))) return false;
      if (hasMobile != other.hasMobile || (hasMobile && !mobile_.Equals(other.mobile_))) return false;
      if (hasTollFree != other.hasTollFree || (hasTollFree && !tollFree_.Equals(other.tollFree_))) return false;
      if (hasPremiumRate != other.hasPremiumRate || (hasPremiumRate && !premiumRate_.Equals(other.premiumRate_))) return false;
      if (hasSharedCost != other.hasSharedCost || (hasSharedCost && !sharedCost_.Equals(other.sharedCost_))) return false;
      if (hasPersonalNumber != other.hasPersonalNumber || (hasPersonalNumber && !personalNumber_.Equals(other.personalNumber_))) return false;
      if (hasVoip != other.hasVoip || (hasVoip && !voip_.Equals(other.voip_))) return false;
      if (hasPager != other.hasPager || (hasPager && !pager_.Equals(other.pager_))) return false;
      if (hasUan != other.hasUan || (hasUan && !uan_.Equals(other.uan_))) return false;
      if (hasEmergency != other.hasEmergency || (hasEmergency && !emergency_.Equals(other.emergency_))) return false;
      if (hasVoicemail != other.hasVoicemail || (hasVoicemail && !voicemail_.Equals(other.voicemail_))) return false;
      if (hasShortCode != other.hasShortCode || (hasShortCode && !shortCode_.Equals(other.shortCode_))) return false;
      if (hasStandardRate != other.hasStandardRate || (hasStandardRate && !standardRate_.Equals(other.standardRate_))) return false;
      if (hasCarrierSpecific != other.hasCarrierSpecific || (hasCarrierSpecific && !carrierSpecific_.Equals(other.carrierSpecific_))) return false;
      if (hasSmsServices != other.hasSmsServices || (hasSmsServices && !smsServices_.Equals(other.smsServices_))) return false;
      if (hasNoInternationalDialling != other.hasNoInternationalDialling || (hasNoInternationalDialling && !noInternationalDialling_.Equals(other.noInternationalDialling_))) return false;
      if (hasId != other.hasId || (hasId && !id_.Equals(other.id_))) return false;
      if (hasCountryCode != other.hasCountryCode || (hasCountryCode && !countryCode_.Equals(other.countryCode_))) return false;
      if (hasInternationalPrefix != other.hasInternationalPrefix || (hasInternationalPrefix && !internationalPrefix_.Equals(other.internationalPrefix_))) return false;
      if (hasPreferredInternationalPrefix != other.hasPreferredInternationalPrefix || (hasPreferredInternationalPrefix && !preferredInternationalPrefix_.Equals(other.preferredInternationalPrefix_))) return false;
      if (hasNationalPrefix != other.hasNationalPrefix || (hasNationalPrefix && !nationalPrefix_.Equals(other.nationalPrefix_))) return false;
      if (hasPreferredExtnPrefix != other.hasPreferredExtnPrefix || (hasPreferredExtnPrefix && !preferredExtnPrefix_.Equals(other.preferredExtnPrefix_))) return false;
      if (hasNationalPrefixForParsing != other.hasNationalPrefixForParsing || (hasNationalPrefixForParsing && !nationalPrefixForParsing_.Equals(other.nationalPrefixForParsing_))) return false;
      if (hasNationalPrefixTransformRule != other.hasNationalPrefixTransformRule || (hasNationalPrefixTransformRule && !nationalPrefixTransformRule_.Equals(other.nationalPrefixTransformRule_))) return false;
      if (hasSameMobileAndFixedLinePattern != other.hasSameMobileAndFixedLinePattern || (hasSameMobileAndFixedLinePattern && !sameMobileAndFixedLinePattern_.Equals(other.sameMobileAndFixedLinePattern_))) return false;
      if(numberFormat_.Count != other.numberFormat_.Count) return false;
      for(int ix=0; ix < numberFormat_.Count; ix++)
        if(!numberFormat_[ix].Equals(other.numberFormat_[ix])) return false;
      if(intlNumberFormat_.Count != other.intlNumberFormat_.Count) return false;
      for(int ix=0; ix < intlNumberFormat_.Count; ix++)
        if(!intlNumberFormat_[ix].Equals(other.intlNumberFormat_[ix])) return false;
      if (hasMainCountryForCode != other.hasMainCountryForCode || (hasMainCountryForCode && !mainCountryForCode_.Equals(other.mainCountryForCode_))) return false;
      if (hasLeadingDigits != other.hasLeadingDigits || (hasLeadingDigits && !leadingDigits_.Equals(other.leadingDigits_))) return false;
      if (hasLeadingZeroPossible != other.hasLeadingZeroPossible || (hasLeadingZeroPossible && !leadingZeroPossible_.Equals(other.leadingZeroPossible_))) return false;
      if (hasMobileNumberPortableRegion != other.hasMobileNumberPortableRegion || (hasMobileNumberPortableRegion && !mobileNumberPortableRegion_.Equals(other.mobileNumberPortableRegion_))) return false;
      return true;
    }
    
    #endregion
    
    
    public static Builder CreateBuilder() { return new Builder(); }
    public Builder ToBuilder() { return CreateBuilder(this); }
    public Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneMetadata prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Builder {
      protected Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PhoneMetadata cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PhoneMetadata result;
      
      private PhoneMetadata PrepareBuilder() {
        if (resultIsReadOnly) {
          PhoneMetadata original = result;
          result = new PhoneMetadata();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected PhoneMetadata MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public PhoneMetadata DefaultInstanceForType {
        get { return PhoneMetadata.DefaultInstance; }
      }
      
      public PhoneMetadata Build() { return BuildPartial(); }
      
      public PhoneMetadata BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result;
      }
      
      
      public Builder MergeFrom(PhoneMetadata other) {
        if (other == PhoneMetadata.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGeneralDesc) {
          MergeGeneralDesc(other.GeneralDesc);
        }
        if (other.HasFixedLine) {
          MergeFixedLine(other.FixedLine);
        }
        if (other.HasMobile) {
          MergeMobile(other.Mobile);
        }
        if (other.HasTollFree) {
          MergeTollFree(other.TollFree);
        }
        if (other.HasPremiumRate) {
          MergePremiumRate(other.PremiumRate);
        }
        if (other.HasSharedCost) {
          MergeSharedCost(other.SharedCost);
        }
        if (other.HasPersonalNumber) {
          MergePersonalNumber(other.PersonalNumber);
        }
        if (other.HasVoip) {
          MergeVoip(other.Voip);
        }
        if (other.HasPager) {
          MergePager(other.Pager);
        }
        if (other.HasUan) {
          MergeUan(other.Uan);
        }
        if (other.HasEmergency) {
          MergeEmergency(other.Emergency);
        }
        if (other.HasVoicemail) {
          MergeVoicemail(other.Voicemail);
        }
        if (other.HasShortCode) {
          MergeShortCode(other.ShortCode);
        }
        if (other.HasStandardRate) {
          MergeStandardRate(other.StandardRate);
        }
        if (other.HasCarrierSpecific) {
          MergeCarrierSpecific(other.CarrierSpecific);
        }
        if (other.HasSmsServices) {
          MergeSmsServices(other.SmsServices);
        }
        if (other.HasNoInternationalDialling) {
          MergeNoInternationalDialling(other.NoInternationalDialling);
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasCountryCode) {
          CountryCode = other.CountryCode;
        }
        if (other.HasInternationalPrefix) {
          InternationalPrefix = other.InternationalPrefix;
        }
        if (other.HasPreferredInternationalPrefix) {
          PreferredInternationalPrefix = other.PreferredInternationalPrefix;
        }
        if (other.HasNationalPrefix) {
          NationalPrefix = other.NationalPrefix;
        }
        if (other.HasPreferredExtnPrefix) {
          PreferredExtnPrefix = other.PreferredExtnPrefix;
        }
        if (other.HasNationalPrefixForParsing) {
          NationalPrefixForParsing = other.NationalPrefixForParsing;
        }
        if (other.HasNationalPrefixTransformRule) {
          NationalPrefixTransformRule = other.NationalPrefixTransformRule;
        }
        if (other.HasSameMobileAndFixedLinePattern) {
          SameMobileAndFixedLinePattern = other.SameMobileAndFixedLinePattern;
        }
        if (other.numberFormat_.Count != 0) {
          result.numberFormat_.AddRange(other.numberFormat_);
        }
        if (other.intlNumberFormat_.Count != 0) {
          result.intlNumberFormat_.AddRange(other.intlNumberFormat_);
        }
        if (other.HasMainCountryForCode) {
          MainCountryForCode = other.MainCountryForCode;
        }
        if (other.HasLeadingDigits) {
          LeadingDigits = other.LeadingDigits;
        }
        if (other.HasLeadingZeroPossible) {
          LeadingZeroPossible = other.LeadingZeroPossible;
        }
        if (other.HasMobileNumberPortableRegion) {
          MobileNumberPortableRegion = other.MobileNumberPortableRegion;
        }
        return this;
      }
      
      
      
      
      public bool HasGeneralDesc {
       get { return result.hasGeneralDesc; }
      }
      public PhoneNumberDesc GeneralDesc {
        get { return result.GeneralDesc; }
        set { SetGeneralDesc(value); }
      }
      public Builder SetGeneralDesc(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasGeneralDesc = true;
        result.generalDesc_ = value;
        return this;
      }
      public Builder SetGeneralDesc(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasGeneralDesc = true;
        result.generalDesc_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGeneralDesc(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasGeneralDesc &&
            result.generalDesc_ != PhoneNumberDesc.DefaultInstance) {
            result.generalDesc_ = PhoneNumberDesc.CreateBuilder(result.generalDesc_).MergeFrom(value).BuildPartial();
        } else {
          result.generalDesc_ = value;
        }
        result.hasGeneralDesc = true;
        return this;
      }
      public Builder ClearGeneralDesc() {
        PrepareBuilder();
        result.hasGeneralDesc = false;
        result.generalDesc_ = null;
        return this;
      }
      
      public bool HasFixedLine {
       get { return result.hasFixedLine; }
      }
      public PhoneNumberDesc FixedLine {
        get { return result.FixedLine; }
        set { SetFixedLine(value); }
      }
      public Builder SetFixedLine(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasFixedLine = true;
        result.fixedLine_ = value;
        return this;
      }
      public Builder SetFixedLine(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasFixedLine = true;
        result.fixedLine_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFixedLine(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasFixedLine &&
            result.fixedLine_ != PhoneNumberDesc.DefaultInstance) {
            result.fixedLine_ = PhoneNumberDesc.CreateBuilder(result.fixedLine_).MergeFrom(value).BuildPartial();
        } else {
          result.fixedLine_ = value;
        }
        result.hasFixedLine = true;
        return this;
      }
      public Builder ClearFixedLine() {
        PrepareBuilder();
        result.hasFixedLine = false;
        result.fixedLine_ = null;
        return this;
      }
      
      public bool HasMobile {
       get { return result.hasMobile; }
      }
      public PhoneNumberDesc Mobile {
        get { return result.Mobile; }
        set { SetMobile(value); }
      }
      public Builder SetMobile(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasMobile = true;
        result.mobile_ = value;
        return this;
      }
      public Builder SetMobile(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasMobile = true;
        result.mobile_ = builderForValue.Build();
        return this;
      }
      public Builder MergeMobile(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasMobile &&
            result.mobile_ != PhoneNumberDesc.DefaultInstance) {
            result.mobile_ = PhoneNumberDesc.CreateBuilder(result.mobile_).MergeFrom(value).BuildPartial();
        } else {
          result.mobile_ = value;
        }
        result.hasMobile = true;
        return this;
      }
      public Builder ClearMobile() {
        PrepareBuilder();
        result.hasMobile = false;
        result.mobile_ = null;
        return this;
      }
      
      public bool HasTollFree {
       get { return result.hasTollFree; }
      }
      public PhoneNumberDesc TollFree {
        get { return result.TollFree; }
        set { SetTollFree(value); }
      }
      public Builder SetTollFree(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasTollFree = true;
        result.tollFree_ = value;
        return this;
      }
      public Builder SetTollFree(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasTollFree = true;
        result.tollFree_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTollFree(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasTollFree &&
            result.tollFree_ != PhoneNumberDesc.DefaultInstance) {
            result.tollFree_ = PhoneNumberDesc.CreateBuilder(result.tollFree_).MergeFrom(value).BuildPartial();
        } else {
          result.tollFree_ = value;
        }
        result.hasTollFree = true;
        return this;
      }
      public Builder ClearTollFree() {
        PrepareBuilder();
        result.hasTollFree = false;
        result.tollFree_ = null;
        return this;
      }
      
      public bool HasPremiumRate {
       get { return result.hasPremiumRate; }
      }
      public PhoneNumberDesc PremiumRate {
        get { return result.PremiumRate; }
        set { SetPremiumRate(value); }
      }
      public Builder SetPremiumRate(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasPremiumRate = true;
        result.premiumRate_ = value;
        return this;
      }
      public Builder SetPremiumRate(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasPremiumRate = true;
        result.premiumRate_ = builderForValue.Build();
        return this;
      }
      public Builder MergePremiumRate(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasPremiumRate &&
            result.premiumRate_ != PhoneNumberDesc.DefaultInstance) {
            result.premiumRate_ = PhoneNumberDesc.CreateBuilder(result.premiumRate_).MergeFrom(value).BuildPartial();
        } else {
          result.premiumRate_ = value;
        }
        result.hasPremiumRate = true;
        return this;
      }
      public Builder ClearPremiumRate() {
        PrepareBuilder();
        result.hasPremiumRate = false;
        result.premiumRate_ = null;
        return this;
      }
      
      public bool HasSharedCost {
       get { return result.hasSharedCost; }
      }
      public PhoneNumberDesc SharedCost {
        get { return result.SharedCost; }
        set { SetSharedCost(value); }
      }
      public Builder SetSharedCost(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasSharedCost = true;
        result.sharedCost_ = value;
        return this;
      }
      public Builder SetSharedCost(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasSharedCost = true;
        result.sharedCost_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSharedCost(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasSharedCost &&
            result.sharedCost_ != PhoneNumberDesc.DefaultInstance) {
            result.sharedCost_ = PhoneNumberDesc.CreateBuilder(result.sharedCost_).MergeFrom(value).BuildPartial();
        } else {
          result.sharedCost_ = value;
        }
        result.hasSharedCost = true;
        return this;
      }
      public Builder ClearSharedCost() {
        PrepareBuilder();
        result.hasSharedCost = false;
        result.sharedCost_ = null;
        return this;
      }
      
      public bool HasPersonalNumber {
       get { return result.hasPersonalNumber; }
      }
      public PhoneNumberDesc PersonalNumber {
        get { return result.PersonalNumber; }
        set { SetPersonalNumber(value); }
      }
      public Builder SetPersonalNumber(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasPersonalNumber = true;
        result.personalNumber_ = value;
        return this;
      }
      public Builder SetPersonalNumber(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasPersonalNumber = true;
        result.personalNumber_ = builderForValue.Build();
        return this;
      }
      public Builder MergePersonalNumber(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasPersonalNumber &&
            result.personalNumber_ != PhoneNumberDesc.DefaultInstance) {
            result.personalNumber_ = PhoneNumberDesc.CreateBuilder(result.personalNumber_).MergeFrom(value).BuildPartial();
        } else {
          result.personalNumber_ = value;
        }
        result.hasPersonalNumber = true;
        return this;
      }
      public Builder ClearPersonalNumber() {
        PrepareBuilder();
        result.hasPersonalNumber = false;
        result.personalNumber_ = null;
        return this;
      }
      
      public bool HasVoip {
       get { return result.hasVoip; }
      }
      public PhoneNumberDesc Voip {
        get { return result.Voip; }
        set { SetVoip(value); }
      }
      public Builder SetVoip(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasVoip = true;
        result.voip_ = value;
        return this;
      }
      public Builder SetVoip(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasVoip = true;
        result.voip_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVoip(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasVoip &&
            result.voip_ != PhoneNumberDesc.DefaultInstance) {
            result.voip_ = PhoneNumberDesc.CreateBuilder(result.voip_).MergeFrom(value).BuildPartial();
        } else {
          result.voip_ = value;
        }
        result.hasVoip = true;
        return this;
      }
      public Builder ClearVoip() {
        PrepareBuilder();
        result.hasVoip = false;
        result.voip_ = null;
        return this;
      }
      
      public bool HasPager {
       get { return result.hasPager; }
      }
      public PhoneNumberDesc Pager {
        get { return result.Pager; }
        set { SetPager(value); }
      }
      public Builder SetPager(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasPager = true;
        result.pager_ = value;
        return this;
      }
      public Builder SetPager(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasPager = true;
        result.pager_ = builderForValue.Build();
        return this;
      }
      public Builder MergePager(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasPager &&
            result.pager_ != PhoneNumberDesc.DefaultInstance) {
            result.pager_ = PhoneNumberDesc.CreateBuilder(result.pager_).MergeFrom(value).BuildPartial();
        } else {
          result.pager_ = value;
        }
        result.hasPager = true;
        return this;
      }
      public Builder ClearPager() {
        PrepareBuilder();
        result.hasPager = false;
        result.pager_ = null;
        return this;
      }
      
      public bool HasUan {
       get { return result.hasUan; }
      }
      public PhoneNumberDesc Uan {
        get { return result.Uan; }
        set { SetUan(value); }
      }
      public Builder SetUan(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasUan = true;
        result.uan_ = value;
        return this;
      }
      public Builder SetUan(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasUan = true;
        result.uan_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUan(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasUan &&
            result.uan_ != PhoneNumberDesc.DefaultInstance) {
            result.uan_ = PhoneNumberDesc.CreateBuilder(result.uan_).MergeFrom(value).BuildPartial();
        } else {
          result.uan_ = value;
        }
        result.hasUan = true;
        return this;
      }
      public Builder ClearUan() {
        PrepareBuilder();
        result.hasUan = false;
        result.uan_ = null;
        return this;
      }
      
      public bool HasEmergency {
       get { return result.hasEmergency; }
      }
      public PhoneNumberDesc Emergency {
        get { return result.Emergency; }
        set { SetEmergency(value); }
      }
      public Builder SetEmergency(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasEmergency = true;
        result.emergency_ = value;
        return this;
      }
      public Builder SetEmergency(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasEmergency = true;
        result.emergency_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEmergency(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasEmergency &&
            result.emergency_ != PhoneNumberDesc.DefaultInstance) {
            result.emergency_ = PhoneNumberDesc.CreateBuilder(result.emergency_).MergeFrom(value).BuildPartial();
        } else {
          result.emergency_ = value;
        }
        result.hasEmergency = true;
        return this;
      }
      public Builder ClearEmergency() {
        PrepareBuilder();
        result.hasEmergency = false;
        result.emergency_ = null;
        return this;
      }
      
      public bool HasVoicemail {
       get { return result.hasVoicemail; }
      }
      public PhoneNumberDesc Voicemail {
        get { return result.Voicemail; }
        set { SetVoicemail(value); }
      }
      public Builder SetVoicemail(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasVoicemail = true;
        result.voicemail_ = value;
        return this;
      }
      public Builder SetVoicemail(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasVoicemail = true;
        result.voicemail_ = builderForValue.Build();
        return this;
      }
      public Builder MergeVoicemail(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasVoicemail &&
            result.voicemail_ != PhoneNumberDesc.DefaultInstance) {
            result.voicemail_ = PhoneNumberDesc.CreateBuilder(result.voicemail_).MergeFrom(value).BuildPartial();
        } else {
          result.voicemail_ = value;
        }
        result.hasVoicemail = true;
        return this;
      }
      public Builder ClearVoicemail() {
        PrepareBuilder();
        result.hasVoicemail = false;
        result.voicemail_ = null;
        return this;
      }
      
      public bool HasShortCode {
       get { return result.hasShortCode; }
      }
      public PhoneNumberDesc ShortCode {
        get { return result.ShortCode; }
        set { SetShortCode(value); }
      }
      public Builder SetShortCode(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasShortCode = true;
        result.shortCode_ = value;
        return this;
      }
      public Builder SetShortCode(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasShortCode = true;
        result.shortCode_ = builderForValue.Build();
        return this;
      }
      public Builder MergeShortCode(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasShortCode &&
            result.shortCode_ != PhoneNumberDesc.DefaultInstance) {
            result.shortCode_ = PhoneNumberDesc.CreateBuilder(result.shortCode_).MergeFrom(value).BuildPartial();
        } else {
          result.shortCode_ = value;
        }
        result.hasShortCode = true;
        return this;
      }
      public Builder ClearShortCode() {
        PrepareBuilder();
        result.hasShortCode = false;
        result.shortCode_ = null;
        return this;
      }
      
      public bool HasStandardRate {
       get { return result.hasStandardRate; }
      }
      public PhoneNumberDesc StandardRate {
        get { return result.StandardRate; }
        set { SetStandardRate(value); }
      }
      public Builder SetStandardRate(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasStandardRate = true;
        result.standardRate_ = value;
        return this;
      }
      public Builder SetStandardRate(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasStandardRate = true;
        result.standardRate_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStandardRate(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasStandardRate &&
            result.standardRate_ != PhoneNumberDesc.DefaultInstance) {
            result.standardRate_ = PhoneNumberDesc.CreateBuilder(result.standardRate_).MergeFrom(value).BuildPartial();
        } else {
          result.standardRate_ = value;
        }
        result.hasStandardRate = true;
        return this;
      }
      public Builder ClearStandardRate() {
        PrepareBuilder();
        result.hasStandardRate = false;
        result.standardRate_ = null;
        return this;
      }
      
      public bool HasCarrierSpecific {
       get { return result.hasCarrierSpecific; }
      }
      public PhoneNumberDesc CarrierSpecific {
        get { return result.CarrierSpecific; }
        set { SetCarrierSpecific(value); }
      }
      public Builder SetCarrierSpecific(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasCarrierSpecific = true;
        result.carrierSpecific_ = value;
        return this;
      }
      public Builder SetCarrierSpecific(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasCarrierSpecific = true;
        result.carrierSpecific_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCarrierSpecific(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasCarrierSpecific &&
            result.carrierSpecific_ != PhoneNumberDesc.DefaultInstance) {
            result.carrierSpecific_ = PhoneNumberDesc.CreateBuilder(result.carrierSpecific_).MergeFrom(value).BuildPartial();
        } else {
          result.carrierSpecific_ = value;
        }
        result.hasCarrierSpecific = true;
        return this;
      }
      public Builder ClearCarrierSpecific() {
        PrepareBuilder();
        result.hasCarrierSpecific = false;
        result.carrierSpecific_ = null;
        return this;
      }
      
      public bool HasSmsServices {
       get { return result.hasSmsServices; }
      }
      public PhoneNumberDesc SmsServices {
        get { return result.SmsServices; }
        set { SetSmsServices(value); }
      }
      public Builder SetSmsServices(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasSmsServices = true;
        result.smsServices_ = value;
        return this;
      }
      public Builder SetSmsServices(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasSmsServices = true;
        result.smsServices_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSmsServices(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasSmsServices &&
            result.smsServices_ != PhoneNumberDesc.DefaultInstance) {
            result.smsServices_ = PhoneNumberDesc.CreateBuilder(result.smsServices_).MergeFrom(value).BuildPartial();
        } else {
          result.smsServices_ = value;
        }
        result.hasSmsServices = true;
        return this;
      }
      public Builder ClearSmsServices() {
        PrepareBuilder();
        result.hasSmsServices = false;
        result.smsServices_ = null;
        return this;
      }
      
      public bool HasNoInternationalDialling {
       get { return result.hasNoInternationalDialling; }
      }
      public PhoneNumberDesc NoInternationalDialling {
        get { return result.NoInternationalDialling; }
        set { SetNoInternationalDialling(value); }
      }
      public Builder SetNoInternationalDialling(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasNoInternationalDialling = true;
        result.noInternationalDialling_ = value;
        return this;
      }
      public Builder SetNoInternationalDialling(PhoneNumberDesc.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.hasNoInternationalDialling = true;
        result.noInternationalDialling_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNoInternationalDialling(PhoneNumberDesc value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        if (result.hasNoInternationalDialling &&
            result.noInternationalDialling_ != PhoneNumberDesc.DefaultInstance) {
            result.noInternationalDialling_ = PhoneNumberDesc.CreateBuilder(result.noInternationalDialling_).MergeFrom(value).BuildPartial();
        } else {
          result.noInternationalDialling_ = value;
        }
        result.hasNoInternationalDialling = true;
        return this;
      }
      public Builder ClearNoInternationalDialling() {
        PrepareBuilder();
        result.hasNoInternationalDialling = false;
        result.noInternationalDialling_ = null;
        return this;
      }
      
      public bool HasId {
        get { return result.hasId; }
      }
      public string Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = "";
        return this;
      }
      
      public bool HasCountryCode {
        get { return result.hasCountryCode; }
      }
      public int CountryCode {
        get { return result.CountryCode; }
        set { SetCountryCode(value); }
      }
      public Builder SetCountryCode(int value) {
        PrepareBuilder();
        result.hasCountryCode = true;
        result.countryCode_ = value;
        return this;
      }
      public Builder ClearCountryCode() {
        PrepareBuilder();
        result.hasCountryCode = false;
        result.countryCode_ = 0;
        return this;
      }
      
      public bool HasInternationalPrefix {
        get { return result.hasInternationalPrefix; }
      }
      public string InternationalPrefix {
        get { return result.InternationalPrefix; }
        set { SetInternationalPrefix(value); }
      }
      public Builder SetInternationalPrefix(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasInternationalPrefix = true;
        result.internationalPrefix_ = value;
        return this;
      }
      public Builder ClearInternationalPrefix() {
        PrepareBuilder();
        result.hasInternationalPrefix = false;
        result.internationalPrefix_ = "";
        return this;
      }
      
      public bool HasPreferredInternationalPrefix {
        get { return result.hasPreferredInternationalPrefix; }
      }
      public string PreferredInternationalPrefix {
        get { return result.PreferredInternationalPrefix; }
        set { SetPreferredInternationalPrefix(value); }
      }
      public Builder SetPreferredInternationalPrefix(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasPreferredInternationalPrefix = true;
        result.preferredInternationalPrefix_ = value;
        return this;
      }
      public Builder ClearPreferredInternationalPrefix() {
        PrepareBuilder();
        result.hasPreferredInternationalPrefix = false;
        result.preferredInternationalPrefix_ = "";
        return this;
      }
      
      public bool HasNationalPrefix {
        get { return result.hasNationalPrefix; }
      }
      public string NationalPrefix {
        get { return result.NationalPrefix; }
        set { SetNationalPrefix(value); }
      }
      public Builder SetNationalPrefix(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasNationalPrefix = true;
        result.nationalPrefix_ = value;
        return this;
      }
      public Builder ClearNationalPrefix() {
        PrepareBuilder();
        result.hasNationalPrefix = false;
        result.nationalPrefix_ = "";
        return this;
      }
      
      public bool HasPreferredExtnPrefix {
        get { return result.hasPreferredExtnPrefix; }
      }
      public string PreferredExtnPrefix {
        get { return result.PreferredExtnPrefix; }
        set { SetPreferredExtnPrefix(value); }
      }
      public Builder SetPreferredExtnPrefix(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasPreferredExtnPrefix = true;
        result.preferredExtnPrefix_ = value;
        return this;
      }
      public Builder ClearPreferredExtnPrefix() {
        PrepareBuilder();
        result.hasPreferredExtnPrefix = false;
        result.preferredExtnPrefix_ = "";
        return this;
      }
      
      public bool HasNationalPrefixForParsing {
        get { return result.hasNationalPrefixForParsing; }
      }
      public string NationalPrefixForParsing {
        get { return result.NationalPrefixForParsing; }
        set { SetNationalPrefixForParsing(value); }
      }
      public Builder SetNationalPrefixForParsing(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasNationalPrefixForParsing = true;
        result.nationalPrefixForParsing_ = value;
        return this;
      }
      public Builder ClearNationalPrefixForParsing() {
        PrepareBuilder();
        result.hasNationalPrefixForParsing = false;
        result.nationalPrefixForParsing_ = "";
        return this;
      }
      
      public bool HasNationalPrefixTransformRule {
        get { return result.hasNationalPrefixTransformRule; }
      }
      public string NationalPrefixTransformRule {
        get { return result.NationalPrefixTransformRule; }
        set { SetNationalPrefixTransformRule(value); }
      }
      public Builder SetNationalPrefixTransformRule(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasNationalPrefixTransformRule = true;
        result.nationalPrefixTransformRule_ = value;
        return this;
      }
      public Builder ClearNationalPrefixTransformRule() {
        PrepareBuilder();
        result.hasNationalPrefixTransformRule = false;
        result.nationalPrefixTransformRule_ = "";
        return this;
      }
      
      public bool HasSameMobileAndFixedLinePattern {
        get { return result.hasSameMobileAndFixedLinePattern; }
      }
      public bool SameMobileAndFixedLinePattern {
        get { return result.SameMobileAndFixedLinePattern; }
        set { SetSameMobileAndFixedLinePattern(value); }
      }
      public Builder SetSameMobileAndFixedLinePattern(bool value) {
        PrepareBuilder();
        result.hasSameMobileAndFixedLinePattern = true;
        result.sameMobileAndFixedLinePattern_ = value;
        return this;
      }
      public Builder ClearSameMobileAndFixedLinePattern() {
        PrepareBuilder();
        result.hasSameMobileAndFixedLinePattern = false;
        result.sameMobileAndFixedLinePattern_ = false;
        return this;
      }
      
      public IList<NumberFormat> NumberFormatList {
        get { return PrepareBuilder().numberFormat_; }
      }
      public int NumberFormatCount {
        get { return result.NumberFormatCount; }
      }
      public NumberFormat GetNumberFormat(int index) {
        return result.GetNumberFormat(index);
      }
      public Builder SetNumberFormat(int index, NumberFormat value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.numberFormat_[index] = value;
        return this;
      }
      public Builder SetNumberFormat(int index, NumberFormat.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.numberFormat_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNumberFormat(NumberFormat value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.numberFormat_.Add(value);
        return this;
      }
      public Builder AddNumberFormat(NumberFormat.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.numberFormat_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNumberFormat(IEnumerable<NumberFormat> values) {
        PrepareBuilder();
        result.numberFormat_.AddRange(values);
        return this;
      }
      public Builder ClearNumberFormat() {
        PrepareBuilder();
        result.numberFormat_.Clear();
        return this;
      }
      
      public IList<NumberFormat> IntlNumberFormatList {
        get { return PrepareBuilder().intlNumberFormat_; }
      }
      public int IntlNumberFormatCount {
        get { return result.IntlNumberFormatCount; }
      }
      public NumberFormat GetIntlNumberFormat(int index) {
        return result.GetIntlNumberFormat(index);
      }
      public Builder SetIntlNumberFormat(int index, NumberFormat value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.intlNumberFormat_[index] = value;
        return this;
      }
      public Builder SetIntlNumberFormat(int index, NumberFormat.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.intlNumberFormat_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddIntlNumberFormat(NumberFormat value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.intlNumberFormat_.Add(value);
        return this;
      }
      public Builder AddIntlNumberFormat(NumberFormat.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.intlNumberFormat_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeIntlNumberFormat(IEnumerable<NumberFormat> values) {
        PrepareBuilder();
        result.intlNumberFormat_.AddRange(values);
        return this;
      }
      public Builder ClearIntlNumberFormat() {
        PrepareBuilder();
        result.intlNumberFormat_.Clear();
        return this;
      }
      
      public bool HasMainCountryForCode {
        get { return result.hasMainCountryForCode; }
      }
      public bool MainCountryForCode {
        get { return result.MainCountryForCode; }
        set { SetMainCountryForCode(value); }
      }
      public Builder SetMainCountryForCode(bool value) {
        PrepareBuilder();
        result.hasMainCountryForCode = true;
        result.mainCountryForCode_ = value;
        return this;
      }
      public Builder ClearMainCountryForCode() {
        PrepareBuilder();
        result.hasMainCountryForCode = false;
        result.mainCountryForCode_ = false;
        return this;
      }
      
      public bool HasLeadingDigits {
        get { return result.hasLeadingDigits; }
      }
      public string LeadingDigits {
        get { return result.LeadingDigits; }
        set { SetLeadingDigits(value); }
      }
      public Builder SetLeadingDigits(string value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.hasLeadingDigits = true;
        result.leadingDigits_ = value;
        return this;
      }
      public Builder ClearLeadingDigits() {
        PrepareBuilder();
        result.hasLeadingDigits = false;
        result.leadingDigits_ = "";
        return this;
      }
      
      public bool HasLeadingZeroPossible {
        get { return result.hasLeadingZeroPossible; }
      }
      public bool LeadingZeroPossible {
        get { return result.LeadingZeroPossible; }
        set { SetLeadingZeroPossible(value); }
      }
      public Builder SetLeadingZeroPossible(bool value) {
        PrepareBuilder();
        result.hasLeadingZeroPossible = true;
        result.leadingZeroPossible_ = value;
        return this;
      }
      public Builder ClearLeadingZeroPossible() {
        PrepareBuilder();
        result.hasLeadingZeroPossible = false;
        result.leadingZeroPossible_ = false;
        return this;
      }
      
      public bool HasMobileNumberPortableRegion {
        get { return result.hasMobileNumberPortableRegion; }
      }
      public bool MobileNumberPortableRegion {
        get { return result.MobileNumberPortableRegion; }
        set { SetMobileNumberPortableRegion(value); }
      }
      public Builder SetMobileNumberPortableRegion(bool value) {
        PrepareBuilder();
        result.hasMobileNumberPortableRegion = true;
        result.mobileNumberPortableRegion_ = value;
        return this;
      }
      public Builder ClearMobileNumberPortableRegion() {
        PrepareBuilder();
        result.hasMobileNumberPortableRegion = false;
        result.mobileNumberPortableRegion_ = false;
        return this;
      }
    }
    static PhoneMetadata() {
      object.ReferenceEquals(Phonemetadata.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public partial class PhoneMetadataCollection {
    private PhoneMetadataCollection() { }
    private static readonly PhoneMetadataCollection defaultInstance = new PhoneMetadataCollection();
    private static readonly string[] _phoneMetadataCollectionFieldNames = new string[] { "metadata" };
    private static readonly uint[] _phoneMetadataCollectionFieldTags = new uint[] { 10 };
    public static PhoneMetadataCollection DefaultInstance {
      get { return defaultInstance; }
    }
    
    public PhoneMetadataCollection DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected PhoneMetadataCollection ThisMessage {
      get { return this; }
    }
    
    public const int MetadataFieldNumber = 1;
    private List<PhoneMetadata> metadata_ = new List<PhoneMetadata>();
    public IList<PhoneMetadata> MetadataList {
      get { return metadata_; }
    }
    public int MetadataCount {
      get { return metadata_.Count; }
    }
    public PhoneMetadata GetMetadata(int index) {
      return metadata_[index];
    }
    
    public bool IsInitialized {
      get {
        foreach (PhoneMetadata element in MetadataList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    
    
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(PhoneMetadata i in metadata_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PhoneMetadataCollection other = obj as PhoneMetadataCollection;
      if (other == null) return false;
      if(metadata_.Count != other.metadata_.Count) return false;
      for(int ix=0; ix < metadata_.Count; ix++)
        if(!metadata_[ix].Equals(other.metadata_[ix])) return false;
      return true;
    }
    
    #endregion
    
    
    public static Builder CreateBuilder() { return new Builder(); }
    public Builder ToBuilder() { return CreateBuilder(this); }
    public Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PhoneMetadataCollection prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Builder {
      protected Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PhoneMetadataCollection cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PhoneMetadataCollection result;
      
      private PhoneMetadataCollection PrepareBuilder() {
        if (resultIsReadOnly) {
          PhoneMetadataCollection original = result;
          result = new PhoneMetadataCollection();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected PhoneMetadataCollection MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public PhoneMetadataCollection DefaultInstanceForType {
        get { return PhoneMetadataCollection.DefaultInstance; }
      }
      
      public PhoneMetadataCollection Build() { return BuildPartial(); }
      
      public PhoneMetadataCollection BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result;
      }
      
      
      public Builder MergeFrom(PhoneMetadataCollection other) {
        if (other == PhoneMetadataCollection.DefaultInstance) return this;
        PrepareBuilder();
        if (other.metadata_.Count != 0) {
          result.metadata_.AddRange(other.metadata_);
        }
        return this;
      }
      
      
      
      
      public IList<PhoneMetadata> MetadataList {
        get { return PrepareBuilder().metadata_; }
      }
      public int MetadataCount {
        get { return result.MetadataCount; }
      }
      public PhoneMetadata GetMetadata(int index) {
        return result.GetMetadata(index);
      }
      public Builder SetMetadata(int index, PhoneMetadata value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.metadata_[index] = value;
        return this;
      }
      public Builder SetMetadata(int index, PhoneMetadata.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.metadata_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMetadata(PhoneMetadata value) {
        if(value == null) throw new global::System.ArgumentNullException("value");
        PrepareBuilder();
        result.metadata_.Add(value);
        return this;
      }
      public Builder AddMetadata(PhoneMetadata.Builder builderForValue) {
        if(builderForValue == null) throw new global::System.ArgumentNullException("builderForValue");
        PrepareBuilder();
        result.metadata_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMetadata(IEnumerable<PhoneMetadata> values) {
        PrepareBuilder();
        result.metadata_.AddRange(values);
        return this;
      }
      public Builder ClearMetadata() {
        PrepareBuilder();
        result.metadata_.Clear();
        return this;
      }
    }
    static PhoneMetadataCollection() {
      object.ReferenceEquals(Phonemetadata.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
